-- Database: crud_api_rest

-- DROP DATABASE IF EXISTS crud_api_rest;

CREATE DATABASE crud_api_rest
    WITH
    OWNER = fer
    ENCODING = 'UTF8'
    LC_COLLATE = 'es_ES.UTF-8'
    LC_CTYPE = 'es_ES.UTF-8'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;


drop table productos;

CREATE TABLE productos (
    Id SERIAL PRIMARY KEY,
    Nombre VARCHAR(100),
    Precio DECIMAL(10, 2),
    Cantidad INT,
    Descripcion VARCHAR,
    FechaCreacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE PROCEDURE InsertarProductos(
	p_nombre VARCHAR(100),
	P_precio DECIMAL(10,2),
	P_cantidad INT,
	p_descripcion VARCHAR(200)
)
LANGUAGE plpgsql
AS $$
BEGIN
	-- Insertar el nuevo producto
	INSERT INTO productos(Nombre, Precio, Cantidad, Descripcion)
	VALUES(p_nombre, p_precio, p_cantidad, p_descripcion);

	-- Opcional: Mostrar mensaje de exito
	RAISE NOTICE 'Producto "%" insertado correctamente.', p_nombre;
END;
$$;


CALL InsertarProductos(
	'Laptop HP EliteBook',
	1250.99,
	15,
	'Laptop empresarial con 16GB RAM y SSD 512GB'
);

CALL InsertarProductos(
	'Refrigerador',
	12986.99,
	1,
	'Refrigerador blanco mave de 300m cubicos '
);

select * from productos;

CREATE OR REPLACE PROCEDURE EliminarProducto(
	p_id INT
)
LANGUAGE plpgsql
AS $$
DECLARE 
	v_nombre_producto VARCHAR(100);
	V_filas_afectadas INT;
BEGIN
	-- Obtener el nombre del producto para el mensaje
	SELECT Nombre INTO v_nombre_producto
	FROM productos
	WHERE Id = p_id;

	--Eliminar el producto
	DELETE FROM productos WHERE Id = p_id;

	-- Verificar si se elimino alguna fila
	GET DIAGNOSTICS v_filas_afectadas = ROW_COUNT;

	--Mostrar mensaje segÃºn el resultado
	IF v_filas_afectadas > 0 THEN
		RAISE NOTICE 'Producto "%" (ID:%) eliminado correctamente.', v_nombre_producto, p_id;
	ELSE 
		RAISE NOTICE 'No se encontro ningun producto con ID: %', p_id;
	END IF;
END;
$$;

CALL EliminarProducto(5);

CREATE OR REPLACE PROCEDURE ObtenerProductos()
LANGUAGE plpgsql
AS $$
DECLARE
	producto RECORD;
BEGIN 
	-- Mostrar todos los productos en formato de tabla
	RAISE NOTICE '-------------------------------------------------------------------------------';
	RAISE NOTICE 'ID     | Nombre            | Precio        |  Cantidad  | Descripcion';
	RAISE NOTICE '-------------------------------------------------------------------------------';

	FOR producto IN
		SELECT Id, Nombre, Precio, Cantidad, Descripcion
		FROM productos
		ORDER BY Id
	LOOP
		RAISE NOTICE '% | % | % | % | %',
			LPAD(producto.Id::TEXT, 3),
			RPAD(COALESCE(producto.Nombre, ''), 22),
			LPAD(COALESCE(producto.Precio::TEXT, ''), 8),
			LPAD(COALESCE(producto.Cantidad::TEXT, ''), 8),
			COALESCE(producto.Descripcion, '');
	END LOOP;

	RAISE NOTICE '-------------------------------------------------------------------------------';
	RAISE NOTICE 'Total de productos: %', (SELECT COUNT(*) FROM productos);
END;
$$;



Drop procedure ObtenerProductos();

CALL ObtenerProductos();

CREATE OR REPLACE PROCEDURE ActualizarProducto(
	p_id INT,
	p_nombre VARCHAR(100) DEFAULT NULL,
	p_precio DECIMAL(10, 2) DEFAULT NULL,
	p_cantidad INT DEFAULT NULL,
	p_descripcion VARCHAR(200) DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
BEGIN
	UPDATE productos 
	SET 
		Nombre = COALESCE(p_nombre, Nombre),
		Precio = COALESCE(p_precio, Precio),
		Cantidad = COALESCE(p_cantidad, Cantidad),
		Descripcion = COALESCE(p_descripcion, Descripcion)
	WHERE Id = p_id;

	IF NOT FOUND THEN
		RAISE EXCEPTION 'El producto con ID % no existe', p_id;
	END IF;

	RAISE NOTICE 'Producto ID % actualizado correctamente', p_id;
EXCEPTION
	WHEN OTHERS THEN 
		RAISE EXCEPTION 'Error al actualizar producto:%', SQLERRM;
END;
$$;

CALL ActualizarProducto(1, 'Teclado mecanico', 75.50, 15, 'Teclado RGB switches azules');

select * from productos;





	
